#ifndef DATA_H_
#define DATA_H_

#include <stdint.h>

#define CARD_NAME "8Inputs"
#define PROGRAM_NAME "8inputs"
#define VERSION "1.1.0"

#define RETRY_TIMES	10
#define RELAY8_INPORT_REG_ADD	0x00
#define RELAY8_OUTPORT_REG_ADD	0x01
#define RELAY8_POLINV_REG_ADD	0x02
#define RELAY8_CFG_REG_ADD		0x03

#define CHANNEL_NR_MIN		1
#define IN_CH_NR_MAX			8

#define ERROR	-1
#define OK		0
#define FAIL	-1

#define RELAY8_HW_I2C_BASE_ADD	0x20

#define MIN_CH_NO 1
#define LED_CH_NO 8
#define IN_CH_NO 8
#define OPTO_CH_NO 8
#define COUNTER_SIZE 4 // COUNT_SIZE
#define ENC_COUNT_SIZE 4
#define ENC_NO 4
#define SCAN_FREQ_SIZE 2
#define OPTO_FREQUENCY_DATA_SIZE 2
#define OPTO_FILL_FACTOR_DATA_SIZE 2
#define OPTO_FILL_FACTOR_SCALE 100

#define CALIBRATION_KEY 0xaa
#define RESET_CALIBRATION_KEY	0x55
#define WDT_RESET_SIGNATURE     0xca
#define WDT_RESET_COUNT_SIGNATURE    0xbe

#define VOLT_TO_MILIVOLT 1000

enum
{
	//retrocompatibility with IOExpander version
	I2C_INPORT_REG_ADD,
	I2C_OUTPORT_REG_ADD,
	I2C_POLINV_REG_ADD,
	I2C_CFG_REG_ADD,
	//---- end retrocompatibility -----
	I2C_MEM_OPTO, // I2C_MEM_DIG_IN
	I2C_MEM_AC_IN,
	I2C_MEM_LEDS, // I2C_MEM_LED_VAL
	I2C_MEM_LED_SET,
	I2C_MEM_LED_CLR,
	I2C_MEM_GP_LED_MODE, //0-auto, 1 - manual;
	I2C_MEM_HS_MODE_VAL, //enable/disable high speed mode for each input
	I2C_MEM_HS_ENABLE, // enable high speed mode for one channel
	I2C_MEM_HS_DISABLE, // disable High speed mode for one channel
	I2C_MEM_OPTO_EDGE_ADD, // I2C_MEM_EDGE_ENABLE
	I2C_MEM_OPTO_ENC_ENABLE_ADD, // I2C_MEM_ENC_ENABLE
	I2C_MEM_SCAN_FREQ,
	I2C_MEM_OPTO_EDGE_COUNT_ADD = I2C_MEM_SCAN_FREQ + SCAN_FREQ_SIZE, // I2C_MEM_PULSE_COUNT_START
	I2C_MEM_PPS = I2C_MEM_OPTO_EDGE_COUNT_ADD + (IN_CH_NO * COUNTER_SIZE),
	I2C_MEM_OPTO_ENC_COUNT_ADD = I2C_MEM_PPS + IN_CH_NO * OPTO_FREQUENCY_DATA_SIZE,
	I2C_MEM_PWM_IN_FILL = I2C_MEM_OPTO_ENC_COUNT_ADD + (ENC_NO * ENC_COUNT_SIZE),
	I2C_MEM_IN_FREQENCY = I2C_MEM_PWM_IN_FILL + (IN_CH_NO * OPTO_FILL_FACTOR_DATA_SIZE),
	I2C_MEM_IN_FREQENCY_END = I2C_MEM_IN_FREQENCY + (IN_CH_NO * OPTO_FREQUENCY_DATA_SIZE) - 1,
	I2C_MEM_OPTO_CNT_RST_ADD, //I2C_MEM_PULSE_COUNT_RESET: 2 bytes to be one modbus register
	I2C_MEM_OPTO_ENC_CNT_RST_ADD = I2C_MEM_OPTO_CNT_RST_ADD + 2, //2 bytes to be one modbus register
	I2C_MODBUS_SETINGS_ADD = I2C_MEM_OPTO_ENC_CNT_RST_ADD + 2,
	I2C_NBS1,
	I2C_MBS2,
	I2C_MBS3,
	I2C_MODBUS_ID_OFFSET_ADD,
	I2C_MEM_EXTI_ENABLE,
	I2C_MEM_BUTTON, //bit0 - state, bit1 - latch
	I2C_MEM_LED_MODE,
	I2C_MEM_WDT_RESET_ADD,
	I2C_MEM_WDT_INTERVAL_SET_ADD,
	I2C_MEM_WDT_INTERVAL_GET_ADD = I2C_MEM_WDT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_SET_ADD = I2C_MEM_WDT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_GET_ADD = I2C_MEM_WDT_INIT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_RESET_COUNT_ADD = I2C_MEM_WDT_INIT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_CLEAR_RESET_COUNT_ADD = I2C_MEM_WDT_RESET_COUNT_ADD + 2,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD = I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD
		+ 4,

	I2C_BOARD_RESET_ADD = 0xaa,

	I2C_MEM_REVISION_HW_MAJOR_ADD = 0xFC,
	I2C_MEM_REVISION_HW_MINOR_ADD,
	I2C_MEM_REVISION_MAJOR_ADD,
	I2C_MEM_REVISION_MINOR_ADD,

	SLAVE_BUFF_SIZE,
};

typedef uint8_t u8;
typedef uint16_t u16;

#define ERROR -1
#define OK 0
#define ARG_CNT_ERR -2
#define ARG_RANGE_ERROR -3
#define IO_ERROR -4

#define STR_(x) #x
#define STR(x) STR_(x)
#define MASK_1 1
#define MASK_2 3
#define MASK_3 7
#define MASK_4 15
#define MASK_5 31
#define MASK_6 63
#define MASK_7 127
#define MASK_(x) MASK_##x
#define MASK(x) MASK_(x)

typedef enum {
	OFF,
	ON,
	STATE_COUNT,
} State;

#endif /* DATA_H_ */